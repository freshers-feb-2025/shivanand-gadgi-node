router.get("/:table", async (req, res) => {

        const { table } = req.params;
        const Model = models[table];
    
        if (!Model) return res.status(400).json({ error: "Invalid table name" });

       
    
        try {
            const records = await Model.findAll();
            res.json(records);
        } catch (err) {
            res.status(404).json({ error: err.message });
        }
   
});

router.get("/:table/:id", async (req, res) => {
    const { table, id } = req.params;
    const Model = models[table];

    if (!Model) return res.status(400).json({ error: "Invalid table name" });

    try {
        const record = await Model.findByPk(id);
        if (!record) return res.status(404).json({ error: "Record not found" });
        res.json(record);
    } catch (err) {
        res.status(404).json({ error: err.message });
    }
   
});


router.put("/:table/:id", async (req, res) => {
    const { table, id } = req.params;
    const Model = models[table];

    if (!Model) return res.status(400).json({ error: "Invalid table name" });

    try {
        const record = await Model.findByPk(id);
        if (!record) return res.status(404).json({ error: "Record not found" });

        await record.update(req.body);
        res.json({ message: "Record updated!", data: record });
    } catch (err) {
        res.status(404).json({ error: err.message });
    }
});

router.delete("/:table/:id", async (req, res) => {
    const { table, id } = req.params;
    const Model = models[table];

    if (!Model) return res.status(400).json({ error: "Invalid table name" });

    try {
        const record = await Model.findByPk(id);
        if (!record) return res.status(404).json({ error: "Record not found" });

        await record.destroy();
        res.json({ message: "Record deleted!" });
    } catch (err) {
        res.status(404).json({ error: err.message });
    }
});



module.exports=router;